/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores2.parser;

import compiladores2.lexer.*;
import compiladores2.node.*;
import compiladores2.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AListInstList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce ASingleInstList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ADeclaracaoInst */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAfectacaoInst */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AFuncaoInst */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce ACondicionalInst */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce ACicloInst */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce ABreakInst */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce ANextInst */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AChamadaStmtInst */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list);
            }
            break;
            case 11: /* reduce ADefineDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ACiniciDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce ASiniciDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list);
            }
            break;
            case 14: /* reduce AEnumeradaAtri */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce ANovoTipoAtriDefine */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AVariadaAfect */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AFuncnormalFunc */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce ASvoidCorpo */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list);
            }
            break;
            case 19: /* reduce ACvoidCorpo */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AStandardCorpoSimples */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list);
            }
            break;
            case 21: /* reduce AListaInstrucoesSecInstListaSecundaria */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list);
            }
            break;
            case 22: /* reduce AFinalInstInstListaSecundaria */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce ARetornoIdRetorno */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce ADuascondicoesCondicional */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce AUmacondicaoCondicional */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce ANormalCondicao */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce ACicloNormalCiclo */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list);
            }
            break;
            case 28: /* reduce ANominalExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AIniArrayExp */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list);
            }
            break;
            case 30: /* reduce ABooleanaExp */
            {
                ArrayList<Object> list = new30();
                push(goTo(15), list);
            }
            break;
            case 31: /* reduce AChamadaFuncaoCompChamada */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list);
            }
            break;
            case 32: /* reduce AChamadaFuncaoChamada */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list);
            }
            break;
            case 33: /* reduce AListExListArgs */
            {
                ArrayList<Object> list = new33();
                push(goTo(17), list);
            }
            break;
            case 34: /* reduce AListDecListArgs */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list);
            }
            break;
            case 35: /* reduce AVariasExpListExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(18), list);
            }
            break;
            case 36: /* reduce AUniExpListExp */
            {
                ArrayList<Object> list = new36();
                push(goTo(18), list);
            }
            break;
            case 37: /* reduce AVariasDeclListDecl */
            {
                ArrayList<Object> list = new37();
                push(goTo(19), list);
            }
            break;
            case 38: /* reduce AUniDeclListDecl */
            {
                ArrayList<Object> list = new38();
                push(goTo(19), list);
            }
            break;
            case 39: /* reduce APlusAritm */
            {
                ArrayList<Object> list = new39();
                push(goTo(20), list);
            }
            break;
            case 40: /* reduce AMinusAritm */
            {
                ArrayList<Object> list = new40();
                push(goTo(20), list);
            }
            break;
            case 41: /* reduce ANegAritm */
            {
                ArrayList<Object> list = new41();
                push(goTo(20), list);
            }
            break;
            case 42: /* reduce AFactorAritm */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list);
            }
            break;
            case 43: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new43();
                push(goTo(21), list);
            }
            break;
            case 44: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list);
            }
            break;
            case 45: /* reduce AModFactor */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AExpoFactor */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list);
            }
            break;
            case 47: /* reduce APotExpo */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce ATermExpo */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list);
            }
            break;
            case 49: /* reduce AIntTerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list);
            }
            break;
            case 50: /* reduce AFloatTerm */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list);
            }
            break;
            case 51: /* reduce AVarChamadaTerm */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AVariavelTerm */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AExpTerm */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list);
            }
            break;
            case 54: /* reduce AAndBoolProdCore */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list);
            }
            break;
            case 55: /* reduce AOrBoolProdCore */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list);
            }
            break;
            case 56: /* reduce ANotBoolProdCore */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list);
            }
            break;
            case 57: /* reduce ABoolprodBoolProdCore */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list);
            }
            break;
            case 58: /* reduce AIguigualBoolProdNum */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list);
            }
            break;
            case 59: /* reduce AMenorBoolProdNum */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce AMaiorBoolProdNum */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce AMeniguBoolProdNum */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce AMaiguBoolProdNum */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce ADifBoolProdNum */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list);
            }
            break;
            case 64: /* reduce ABoolPrimBoolProdNum */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list);
            }
            break;
            case 65: /* reduce ATrueBoolPrimitivo */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AFalseBoolPrimitivo */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list);
            }
            break;
            case 67: /* reduce ABoolSimplesBoolPrimitivo */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce AIniArrayArray */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce AMultiplaVariavelAfectada */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list);
            }
            break;
            case 70: /* reduce ASingVariavelAfectada */
            {
                ArrayList<Object> list = new70();
                push(goTo(28), list);
            }
            break;
            case 71: /* reduce AIdArrayIdAfectado */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list);
            }
            break;
            case 72: /* reduce AIdArray2IdAfectado */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list);
            }
            break;
            case 73: /* reduce AIdSimplesIdAfectado */
            {
                ArrayList<Object> list = new73();
                push(goTo(29), list);
            }
            break;
            case 74: /* reduce AIndexIndice */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list);
            }
            break;
            case 75: /* reduce ACompostoTipo */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list);
            }
            break;
            case 76: /* reduce ASimplesTipo */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list);
            }
            break;
            case 77: /* reduce AIndefinidaTipoCriado */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list);
            }
            break;
            case 78: /* reduce ASimplesAuxTipoCriado */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list);
            }
            break;
            case 79: /* reduce AIntTipoTipoSimples */
            {
                ArrayList<Object> list = new79();
                push(goTo(33), list);
            }
            break;
            case 80: /* reduce AFloatTipoTipoSimples */
            {
                ArrayList<Object> list = new80();
                push(goTo(33), list);
            }
            break;
            case 81: /* reduce AStringTipoTipoSimples */
            {
                ArrayList<Object> list = new81();
                push(goTo(33), list);
            }
            break;
            case 82: /* reduce ABoolTipoTipoSimples */
            {
                ArrayList<Object> list = new82();
                push(goTo(33), list);
            }
            break;
            case 83: /* reduce AVoidTipoSimples */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list);
            }
            break;
            case 84: /* reduce ASemicolonSeparator */
            {
                ArrayList<Object> list = new84();
                push(goTo(34), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramaNode1 = new APrograma(listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListInstList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInst pinstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstNode2 = (PInst)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstNode2 != null)
	{
	  listNode3.add(pinstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASingleInstList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInst pinstNode1;
        pinstNode1 = (PInst)nodeArrayList1.get(0);
	if(pinstNode1 != null)
	{
	  listNode2.add(pinstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADeclaracaoInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PDecl pdeclNode2;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);

        pinstNode1 = new ADeclaracaoInst(pdeclNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfectacaoInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PAfect pafectNode2;
        pafectNode2 = (PAfect)nodeArrayList1.get(0);

        pinstNode1 = new AAfectacaoInst(pafectNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFuncaoInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PFunc pfuncNode2;
        pfuncNode2 = (PFunc)nodeArrayList1.get(0);

        pinstNode1 = new AFuncaoInst(pfuncNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ACondicionalInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PCond pcondNode2;
        pcondNode2 = (PCond)nodeArrayList1.get(0);

        pinstNode1 = new ACondicionalInst(pcondNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ACicloInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PCiclo pcicloNode2;
        pcicloNode2 = (PCiclo)nodeArrayList1.get(0);

        pinstNode1 = new ACicloInst(pcicloNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ABreakInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pinstNode1 = new ABreakInst(tbreakNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANextInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TNext tnextNode2;
        tnextNode2 = (TNext)nodeArrayList1.get(0);

        pinstNode1 = new ANextInst(tnextNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AChamadaStmtInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        pinstNode1 = new AChamadaStmtInst(pchamadaNode2);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADefineDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        TDefine tdefineNode2;
        PDecl pdeclNode3;
        tdefineNode2 = (TDefine)nodeArrayList1.get(0);
        pdeclNode3 = (PDecl)nodeArrayList2.get(0);

        pdeclNode1 = new ADefineDecl(tdefineNode2, pdeclNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACiniciDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PDecl pdeclNode2;
        PExp pexpNode3;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pdeclNode1 = new ACiniciDecl(pdeclNode2, pexpNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASiniciDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AEnumeradaAtri */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PChamada pchamadaNode2;
        PTipo ptipoNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList3.get(0);

        pdeclNode1 = new AEnumeradaDecl(pchamadaNode2, ptipoNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANovoTipoAtriDefine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PTipo ptipoNode2;
        PTipo ptipoNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);

        pdeclNode1 = new ANovoTipoDecl(ptipoNode2, ptipoNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVariadaAfect */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        PAfect pafectNode2;
        PExp pexpNode3;
        pafectNode2 = (PAfect)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pafectNode1 = new AVariadaAfect(pafectNode2, pexpNode3);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFuncnormalFunc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        PDecl pdeclNode2;
        PCorpo pcorpoNode3;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);
        pcorpoNode3 = (PCorpo)nodeArrayList3.get(0);

        pfuncNode1 = new AFuncnormalFunc(pdeclNode2, pcorpoNode3);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASvoidCorpo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        {
            // Block
        PCorpo pcorpoNode2;
        PCorpo pcorpoNode3;
        pcorpoNode2 = (PCorpo)nodeArrayList1.get(0);
        pcorpoNode3 = (PCorpo)nodeArrayList2.get(0);

        pcorpoNode1 = new ASvoidCorpo(pcorpoNode2, pcorpoNode3);
        }
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ACvoidCorpo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        pcorpoNode1 = (PCorpo)nodeArrayList1.get(0);
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AStandardCorpoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        pcorpoNode1 = (PCorpo)nodeArrayList1.get(0);
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AListaInstrucoesSecInstListaSecundaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        {
            // Block
        PCorpo pcorpoNode2;
        PInst pinstNode3;
        pcorpoNode2 = (PCorpo)nodeArrayList1.get(0);
        pinstNode3 = (PInst)nodeArrayList3.get(0);

        pcorpoNode1 = new AListaInstrucoesSecCorpo(pcorpoNode2, pinstNode3);
        }
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFinalInstInstListaSecundaria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        {
            // Block
        PInst pinstNode2;
        pinstNode2 = (PInst)nodeArrayList1.get(0);

        pcorpoNode1 = new AFinalInstCorpo(pinstNode2);
        }
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARetornoIdRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pcorpoNode1 = new ARetornoIdCorpo(treturnNode2, pexpNode3);
        }
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADuascondicoesCondicional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        PCorpo pcorpoNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pcorpoNode3 = (PCorpo)nodeArrayList4.get(0);

        pcondNode1 = new ADuascondicoesCond(pcondNode2, pcorpoNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AUmacondicaoCondicional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ANormalCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExp pexpNode2;
        PCorpo pcorpoNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pcorpoNode3 = (PCorpo)nodeArrayList5.get(0);

        pcondNode1 = new ANormalCond(pexpNode2, pcorpoNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ACicloNormalCiclo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCiclo pcicloNode1;
        {
            // Block
        PExp pexpNode2;
        PCorpo pcorpoNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pcorpoNode3 = (PCorpo)nodeArrayList5.get(0);

        pcicloNode1 = new ACicloNormalCiclo(pexpNode2, pcorpoNode3);
        }
	nodeList.add(pcicloNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANominalExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TStringProd tstringprodNode2;
        tstringprodNode2 = (TStringProd)nodeArrayList1.get(0);

        pexpNode1 = new ANominalExp(tstringprodNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIniArrayExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABooleanaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AChamadaFuncaoCompChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        PChamada pchamadaNode3;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);
        pchamadaNode3 = (PChamada)nodeArrayList3.get(0);

        pchamadaNode1 = new AChamadaFuncaoCompChamada(tvariavelNode2, pchamadaNode3);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AChamadaFuncaoChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);

        pchamadaNode1 = new AChamadaFuncaoChamada(tvariavelNode2);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AListExListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        pchamadaNode1 = (PChamada)nodeArrayList1.get(0);
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AListDecListArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        pchamadaNode1 = (PChamada)nodeArrayList1.get(0);
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AVariasExpListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        PChamada pchamadaNode2;
        PExp pexpNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pchamadaNode1 = new AVariasExpChamada(pchamadaNode2, pexpNode3);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AUniExpListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pchamadaNode1 = new AUniExpChamada(pexpNode2);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AVariasDeclListDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        PChamada pchamadaNode2;
        PDecl pdeclNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        pdeclNode3 = (PDecl)nodeArrayList3.get(0);

        pchamadaNode1 = new AVariasDeclChamada(pchamadaNode2, pdeclNode3);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AUniDeclListDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        PDecl pdeclNode2;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);

        pchamadaNode1 = new AUniDeclChamada(pdeclNode2);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APlusAritm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMinusAritm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANegAritm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFactorAritm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpoFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce APotExpo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APotExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ATermExpo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexpNode1 = new AIntExp(tintegerNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFloatTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFloatProd tfloatprodNode2;
        tfloatprodNode2 = (TFloatProd)nodeArrayList1.get(0);

        pexpNode1 = new AFloatExp(tfloatprodNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AVarChamadaTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        pexpNode1 = new AVarChamadaExp(pchamadaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVariavelTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(tvariavelNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAndBoolProdCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOrBoolProdCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANotBoolProdCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ABoolprodBoolProdCore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIguigualBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AIguigualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMenorBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMaiorBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMeniguBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMeniguExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AMaiguBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiguExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ADifBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADifExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ABoolPrimBoolProdNum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATrueBoolPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpNode1 = new ATrueExp(ttrueNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AFalseBoolPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpNode1 = new AFalseExp(tfalseNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ABoolSimplesBoolPrimitivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpNode1 = new ABoolSimplesExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AIniArrayArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList2.get(0);

        pexpNode1 = new AIniArrayExp(pchamadaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AMultiplaVariavelAfectada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        PAfect pafectNode2;
        PAfect pafectNode3;
        pafectNode2 = (PAfect)nodeArrayList1.get(0);
        pafectNode3 = (PAfect)nodeArrayList3.get(0);

        pafectNode1 = new AMultiplaAfect(pafectNode2, pafectNode3);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ASingVariavelAfectada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        pafectNode1 = (PAfect)nodeArrayList1.get(0);
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AIdArrayIdAfectado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        TInteger tintegerNode3;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList3.get(0);

        pafectNode1 = new AIdArrayAfect(tvariavelNode2, tintegerNode3);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AIdArray2IdAfectado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        PAfect pafectNode3;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);
        pafectNode3 = (PAfect)nodeArrayList3.get(0);

        pafectNode1 = new AIdArray2Afect(tvariavelNode2, pafectNode3);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIdSimplesIdAfectado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);

        pafectNode1 = new AIdSimplesAfect(tvariavelNode2);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIndexIndice */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAfect pafectNode1;
        {
            // Block
        TVariavel tvariavelNode2;
        TInteger tintegerNode3;
        tvariavelNode2 = (TVariavel)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList3.get(0);

        pafectNode1 = new AIndexAfect(tvariavelNode2, tintegerNode3);
        }
	nodeList.add(pafectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACompostoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TInteger tintegerNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList3.get(0);

        ptipoNode1 = new ACompostoTipo(ptipoNode2, tintegerNode3);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ASimplesTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        ptipoNode1 = (PTipo)nodeArrayList1.get(0);
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AIndefinidaTipoCriado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        ptipoNode1 = new AIndefinidaTipo(pexpNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ASimplesAuxTipoCriado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        ptipoNode1 = (PTipo)nodeArrayList1.get(0);
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AIntTipoTipoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipoTipo(tintNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AFloatTipoTipoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        ptipoNode1 = new AFloatTipoTipo(tfloatNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AStringTipoTipoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptipoNode1 = new AStringTipoTipo(tstringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ABoolTipoTipoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptipoNode1 = new ABoolTipoTipo(tboolNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AVoidTipoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptipoNode1 = new AVoidTipo(tvoidNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ASemicolonSeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 2}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 3}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 6}, {0, SHIFT, 1}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 7}, {0, SHIFT, 1}, {30, SHIFT, 45}, {31, SHIFT, 46}, {32, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 9}, {0, SHIFT, 1}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 57}, {4, SHIFT, 58}, {9, REDUCE, 73}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 16}, {48, ACCEPT, -1}, },
			{{-1, ERROR, 17}, {7, SHIFT, 59}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 13}, {2, SHIFT, 61}, {9, SHIFT, 62}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 25}, {38, SHIFT, 63}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 51}, {7, REDUCE, 10}, },
			{{-1, ERROR, 28}, {10, SHIFT, 64}, {11, SHIFT, 65}, },
			{{-1, REDUCE, 67}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 42}, {17, SHIFT, 68}, {18, SHIFT, 69}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 46}, {19, SHIFT, 71}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 30}, {27, SHIFT, 72}, {28, SHIFT, 73}, },
			{{-1, REDUCE, 57}, {13, SHIFT, 74}, {14, SHIFT, 75}, {22, SHIFT, 76}, {23, SHIFT, 77}, {24, SHIFT, 78}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 37}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 57}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 41}, {1, SHIFT, 81}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, ERROR, 42}, {3, SHIFT, 82}, {10, SHIFT, 64}, },
			{{-1, REDUCE, 41}, {17, SHIFT, 68}, {18, SHIFT, 69}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 56}, {13, SHIFT, 74}, {14, SHIFT, 75}, {22, SHIFT, 76}, {23, SHIFT, 77}, {24, SHIFT, 78}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 53}, {30, SHIFT, 45}, {31, SHIFT, 46}, {32, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, REDUCE, 76}, {4, SHIFT, 84}, },
			{{-1, ERROR, 55}, {27, SHIFT, 72}, {28, SHIFT, 73}, {37, SHIFT, 85}, },
			{{-1, ERROR, 56}, {27, SHIFT, 72}, {28, SHIFT, 73}, {40, SHIFT, 86}, },
			{{-1, ERROR, 57}, {0, SHIFT, 1}, {1, SHIFT, 87}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 58}, {44, SHIFT, 92}, {45, SHIFT, 93}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 61}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 62}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 63}, {2, SHIFT, 101}, },
			{{-1, ERROR, 64}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 65}, {0, SHIFT, 1}, {30, SHIFT, 45}, {31, SHIFT, 46}, {32, SHIFT, 47}, {33, SHIFT, 48}, {34, SHIFT, 49}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 66}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 67}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 68}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 69}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 70}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 71}, {0, SHIFT, 1}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 72}, {0, SHIFT, 1}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 73}, {0, SHIFT, 1}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 74}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 75}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 76}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 77}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 78}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 79}, {0, SHIFT, 1}, {16, SHIFT, 3}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, },
			{{-1, ERROR, 80}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 84}, {45, SHIFT, 120}, },
			{{-1, ERROR, 85}, {2, SHIFT, 121}, },
			{{-1, ERROR, 86}, {2, SHIFT, 122}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 89}, {1, SHIFT, 123}, },
			{{-1, REDUCE, 33}, {10, SHIFT, 64}, {11, SHIFT, 65}, },
			{{-1, REDUCE, 34}, {10, SHIFT, 124}, },
			{{-1, ERROR, 92}, {9, SHIFT, 125}, },
			{{-1, ERROR, 93}, {5, SHIFT, 126}, },
			{{-1, ERROR, 94}, {5, SHIFT, 127}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 97}, {3, SHIFT, 128}, },
			{{-1, REDUCE, 19}, {41, SHIFT, 129}, },
			{{-1, ERROR, 99}, {7, SHIFT, 131}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 101}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 39}, {17, SHIFT, 68}, {18, SHIFT, 69}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 68}, {18, SHIFT, 69}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 43}, {19, SHIFT, 71}, },
			{{-1, REDUCE, 44}, {19, SHIFT, 71}, },
			{{-1, REDUCE, 45}, {19, SHIFT, 71}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 54}, {13, SHIFT, 74}, {14, SHIFT, 75}, {22, SHIFT, 76}, {23, SHIFT, 77}, {24, SHIFT, 78}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 55}, {13, SHIFT, 74}, {14, SHIFT, 75}, {22, SHIFT, 76}, {23, SHIFT, 77}, {24, SHIFT, 78}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 59}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 60}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 58}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 61}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 62}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 63}, {15, SHIFT, 66}, {16, SHIFT, 67}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 120}, {5, SHIFT, 133}, },
			{{-1, ERROR, 121}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 122}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 124}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 125}, {45, SHIFT, 137}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 129}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {44, SHIFT, 39}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 130}, {7, SHIFT, 139}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 1}, {2, SHIFT, 2}, {16, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {29, SHIFT, 6}, {35, SHIFT, 7}, {36, SHIFT, 8}, {39, SHIFT, 9}, {42, SHIFT, 10}, {43, SHIFT, 11}, {44, SHIFT, 12}, {45, SHIFT, 13}, {46, SHIFT, 14}, {47, SHIFT, 15}, },
			{{-1, ERROR, 132}, {3, SHIFT, 141}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 134}, {3, SHIFT, 142}, },
			{{-1, ERROR, 135}, {3, SHIFT, 143}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 96}, {0, 18}, {60, 95}, {131, 140}, },
			{{-1, 19}, },
			{{-1, 20}, {57, 88}, {124, 136}, },
			{{-1, 50}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 97}, },
			{{-1, 98}, {101, 132}, {121, 134}, {122, 135}, },
			{{-1, 99}, },
			{{-1, 130}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, {62, 100}, {64, 102}, {80, 118}, {129, 138}, },
			{{-1, 40}, {0, 27}, {60, 27}, {61, 27}, {101, 27}, {121, 27}, {122, 27}, {131, 27}, },
			{{-1, 89}, },
			{{-1, 28}, {2, 42}, {57, 90}, },
			{{-1, 91}, },
			{{-1, 29}, {1, 41}, {74, 112}, {75, 113}, {76, 114}, {77, 115}, {78, 116}, {79, 117}, },
			{{-1, 30}, {3, 43}, {66, 104}, {67, 105}, },
			{{-1, 31}, {68, 106}, {69, 107}, {70, 108}, },
			{{-1, 32}, {7, 51}, {65, 51}, {71, 109}, },
			{{-1, 33}, {8, 55}, {9, 56}, },
			{{-1, 34}, {6, 44}, {72, 110}, {73, 111}, },
			{{-1, 35}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, {80, 119}, },
			{{-1, 94}, },
			{{-1, 52}, {53, 83}, },
			{{-1, 53}, {65, 103}, },
			{{-1, 54}, },
			{{-1, 60}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: l par, l brac, minus, true, false, 'not', 'define', 'if', 'while', 'break', 'next', variavel, integer, float prod, string prod",
			"expecting: l par, minus, variavel, integer, float prod",
			"expecting: l par, l brac, minus, true, false, 'not', variavel, integer, float prod, string prod",
			"expecting: l par, variavel, integer, float prod",
			"expecting: r par, r brac, semi, col, ddot, menor, maior, equ, menequ, maiequ, dif, 'and', 'or', 'then', 'do'",
			"expecting: l par, minus, true, false, variavel, integer, float prod",
			"expecting: l par, 'int', 'float', 'string', 'bool', 'void', variavel, integer, float prod",
			"expecting: l par, minus, true, false, 'not', variavel, integer, float prod",
			"expecting: semi",
			"expecting: l par, l sbrac, semi, igu, col, ddot, menor, maior, plus, minus, mult, div, pot, equ, menequ, maiequ, dif, 'mod', 'and', 'or'",
			"expecting: r par, l brac, r brac, semi, igu, col, ddot, menor, maior, plus, minus, mult, div, pot, equ, menequ, maiequ, dif, 'mod', 'and', 'or', 'int', 'float', 'string', 'bool', 'void', 'then', 'do'",
			"expecting: r par, r brac, semi, col, ddot",
			"expecting: EOF",
			"expecting: l brac, semi, igu",
			"expecting: semi, 'else'",
			"expecting: r par, r brac, col, ddot",
			"expecting: semi, col, ddot, menor, maior, plus, minus, mult, div, pot, equ, menequ, maiequ, dif, 'mod', 'and', 'or'",
			"expecting: col, ddot",
			"expecting: r par, r brac, semi, col, ddot, menor, maior, plus, minus, equ, menequ, maiequ, dif, 'and', 'or', 'then', 'do'",
			"expecting: r par, r brac, semi, col, ddot, menor, maior, plus, minus, mult, div, equ, menequ, maiequ, dif, 'mod', 'and', 'or', 'then', 'do'",
			"expecting: r par, r brac, semi, col, ddot, menor, maior, plus, minus, mult, div, pot, equ, menequ, maiequ, dif, 'mod', 'and', 'or', 'then', 'do'",
			"expecting: r par, r brac, semi, col, ddot, 'and', 'or'",
			"expecting: igu",
			"expecting: l par, r par, l brac, r brac, semi, igu, col, ddot, menor, maior, plus, minus, mult, div, pot, equ, menequ, maiequ, dif, 'mod', 'and', 'or', 'int', 'float', 'string', 'bool', 'void', 'then', 'do'",
			"expecting: r par, plus, minus",
			"expecting: r brac, col",
			"expecting: r par, l brac, l sbrac, semi, igu, col, 'int', 'float', 'string', 'bool', 'void'",
			"expecting: r par, l brac, semi, igu, col, 'int', 'float', 'string', 'bool', 'void'",
			"expecting: 'int', 'float', 'string', 'bool', 'void'",
			"expecting: 'and', 'or', 'then'",
			"expecting: 'and', 'or', 'do'",
			"expecting: l par, r par, l brac, minus, true, false, 'not', variavel, integer, float prod, string prod",
			"expecting: variavel, integer",
			"expecting: l par, l brac, minus, true, false, 'not', 'define', 'if', 'while', 'break', 'next', variavel, integer, float prod, string prod, EOF",
			"expecting: l brac",
			"expecting: integer",
			"expecting: r par, col",
			"expecting: r par",
			"expecting: r par, col, ddot",
			"expecting: r sbrac",
			"expecting: r brac",
			"expecting: r brac, 'return'",
			"expecting: r par, l brac, semi, igu, col",
			"expecting: l par, l brac, r brac, minus, true, false, 'not', 'define', 'if', 'while', 'return', 'break', 'next', variavel, integer, float prod, string prod",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 12, 8, 8, 8, 13, 8, 8, 8, 14, 8, 15, 16, 17, 18, 19, 20, 20, 21, 4, 4, 11, 22, 22, 23, 10, 24, 25, 19, 4, 26, 26, 26, 26, 26, 8, 27, 27, 28, 26, 29, 30, 31, 32, 33, 33, 0, 2, 34, 2, 6, 3, 3, 3, 3, 3, 3, 5, 5, 1, 1, 1, 1, 1, 1, 2, 10, 11, 8, 35, 34, 34, 10, 36, 37, 38, 36, 22, 39, 39, 8, 8, 40, 41, 8, 8, 0, 15, 42, 19, 19, 20, 20, 20, 20, 4, 4, 18, 18, 18, 18, 18, 18, 8, 22, 39, 0, 0, 10, 2, 35, 22, 22, 8, 2, 8, 43, 40, 27, 40, 40, 36, 39, 8, 40, 8, 8, 14, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
