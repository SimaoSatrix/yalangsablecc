/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladores2.analysis;

import java.util.*;
import compiladores2.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInst());
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADeclaracaoInst(ADeclaracaoInst node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoInst(ADeclaracaoInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoInst(ADeclaracaoInst node)
    {
        inADeclaracaoInst(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outADeclaracaoInst(node);
    }

    public void inAAfectacaoInst(AAfectacaoInst node)
    {
        defaultIn(node);
    }

    public void outAAfectacaoInst(AAfectacaoInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAfectacaoInst(AAfectacaoInst node)
    {
        inAAfectacaoInst(node);
        if(node.getAfect() != null)
        {
            node.getAfect().apply(this);
        }
        outAAfectacaoInst(node);
    }

    public void inAFuncaoInst(AFuncaoInst node)
    {
        defaultIn(node);
    }

    public void outAFuncaoInst(AFuncaoInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoInst(AFuncaoInst node)
    {
        inAFuncaoInst(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        outAFuncaoInst(node);
    }

    public void inACondicionalInst(ACondicionalInst node)
    {
        defaultIn(node);
    }

    public void outACondicionalInst(ACondicionalInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicionalInst(ACondicionalInst node)
    {
        inACondicionalInst(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outACondicionalInst(node);
    }

    public void inACicloInst(ACicloInst node)
    {
        defaultIn(node);
    }

    public void outACicloInst(ACicloInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACicloInst(ACicloInst node)
    {
        inACicloInst(node);
        if(node.getCiclo() != null)
        {
            node.getCiclo().apply(this);
        }
        outACicloInst(node);
    }

    public void inAChamadaStmtInst(AChamadaStmtInst node)
    {
        defaultIn(node);
    }

    public void outAChamadaStmtInst(AChamadaStmtInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaStmtInst(AChamadaStmtInst node)
    {
        inAChamadaStmtInst(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaStmtInst(node);
    }

    public void inABreakInst(ABreakInst node)
    {
        defaultIn(node);
    }

    public void outABreakInst(ABreakInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakInst(ABreakInst node)
    {
        inABreakInst(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakInst(node);
    }

    public void inANextInst(ANextInst node)
    {
        defaultIn(node);
    }

    public void outANextInst(ANextInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextInst(ANextInst node)
    {
        inANextInst(node);
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        outANextInst(node);
    }

    public void inADefineDecl(ADefineDecl node)
    {
        defaultIn(node);
    }

    public void outADefineDecl(ADefineDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefineDecl(ADefineDecl node)
    {
        inADefineDecl(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADefineDecl(node);
    }

    public void inACiniciDecl(ACiniciDecl node)
    {
        defaultIn(node);
    }

    public void outACiniciDecl(ACiniciDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACiniciDecl(ACiniciDecl node)
    {
        inACiniciDecl(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outACiniciDecl(node);
    }

    public void inAEnumeradaDecl(AEnumeradaDecl node)
    {
        defaultIn(node);
    }

    public void outAEnumeradaDecl(AEnumeradaDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnumeradaDecl(AEnumeradaDecl node)
    {
        inAEnumeradaDecl(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAEnumeradaDecl(node);
    }

    public void inANovoTipoDecl(ANovoTipoDecl node)
    {
        defaultIn(node);
    }

    public void outANovoTipoDecl(ANovoTipoDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANovoTipoDecl(ANovoTipoDecl node)
    {
        inANovoTipoDecl(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outANovoTipoDecl(node);
    }

    public void inAVariadaAfect(AVariadaAfect node)
    {
        defaultIn(node);
    }

    public void outAVariadaAfect(AVariadaAfect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariadaAfect(AVariadaAfect node)
    {
        inAVariadaAfect(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAVariadaAfect(node);
    }

    public void inAMultiplaAfect(AMultiplaAfect node)
    {
        defaultIn(node);
    }

    public void outAMultiplaAfect(AMultiplaAfect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplaAfect(AMultiplaAfect node)
    {
        inAMultiplaAfect(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultiplaAfect(node);
    }

    public void inAIdArrayAfect(AIdArrayAfect node)
    {
        defaultIn(node);
    }

    public void outAIdArrayAfect(AIdArrayAfect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayAfect(AIdArrayAfect node)
    {
        inAIdArrayAfect(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAIdArrayAfect(node);
    }

    public void inAIdArray2Afect(AIdArray2Afect node)
    {
        defaultIn(node);
    }

    public void outAIdArray2Afect(AIdArray2Afect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArray2Afect(AIdArray2Afect node)
    {
        inAIdArray2Afect(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAIdArray2Afect(node);
    }

    public void inAIdSimplesAfect(AIdSimplesAfect node)
    {
        defaultIn(node);
    }

    public void outAIdSimplesAfect(AIdSimplesAfect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdSimplesAfect(AIdSimplesAfect node)
    {
        inAIdSimplesAfect(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAIdSimplesAfect(node);
    }

    public void inAIndexAfect(AIndexAfect node)
    {
        defaultIn(node);
    }

    public void outAIndexAfect(AIndexAfect node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexAfect(AIndexAfect node)
    {
        inAIndexAfect(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAIndexAfect(node);
    }

    public void inAFuncnormalFunc(AFuncnormalFunc node)
    {
        defaultIn(node);
    }

    public void outAFuncnormalFunc(AFuncnormalFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncnormalFunc(AFuncnormalFunc node)
    {
        inAFuncnormalFunc(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAFuncnormalFunc(node);
    }

    public void inASvoidCorpo(ASvoidCorpo node)
    {
        defaultIn(node);
    }

    public void outASvoidCorpo(ASvoidCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASvoidCorpo(ASvoidCorpo node)
    {
        inASvoidCorpo(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASvoidCorpo(node);
    }

    public void inAListaInstrucoesSecCorpo(AListaInstrucoesSecCorpo node)
    {
        defaultIn(node);
    }

    public void outAListaInstrucoesSecCorpo(AListaInstrucoesSecCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaInstrucoesSecCorpo(AListaInstrucoesSecCorpo node)
    {
        inAListaInstrucoesSecCorpo(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAListaInstrucoesSecCorpo(node);
    }

    public void inAFinalInstCorpo(AFinalInstCorpo node)
    {
        defaultIn(node);
    }

    public void outAFinalInstCorpo(AFinalInstCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinalInstCorpo(AFinalInstCorpo node)
    {
        inAFinalInstCorpo(node);
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        outAFinalInstCorpo(node);
    }

    public void inARetornoIdCorpo(ARetornoIdCorpo node)
    {
        defaultIn(node);
    }

    public void outARetornoIdCorpo(ARetornoIdCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoIdCorpo(ARetornoIdCorpo node)
    {
        inARetornoIdCorpo(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outARetornoIdCorpo(node);
    }

    public void inADuascondicoesCond(ADuascondicoesCond node)
    {
        defaultIn(node);
    }

    public void outADuascondicoesCond(ADuascondicoesCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADuascondicoesCond(ADuascondicoesCond node)
    {
        inADuascondicoesCond(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADuascondicoesCond(node);
    }

    public void inANormalCond(ANormalCond node)
    {
        defaultIn(node);
    }

    public void outANormalCond(ANormalCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalCond(ANormalCond node)
    {
        inANormalCond(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outANormalCond(node);
    }

    public void inACicloNormalCiclo(ACicloNormalCiclo node)
    {
        defaultIn(node);
    }

    public void outACicloNormalCiclo(ACicloNormalCiclo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACicloNormalCiclo(ACicloNormalCiclo node)
    {
        inACicloNormalCiclo(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outACicloNormalCiclo(node);
    }

    public void inANominalExp(ANominalExp node)
    {
        defaultIn(node);
    }

    public void outANominalExp(ANominalExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANominalExp(ANominalExp node)
    {
        inANominalExp(node);
        if(node.getStringProd() != null)
        {
            node.getStringProd().apply(this);
        }
        outANominalExp(node);
    }

    public void inAChamadaExp(AChamadaExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaExp(AChamadaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExp(AChamadaExp node)
    {
        inAChamadaExp(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMinusExp(node);
    }

    public void inANegExp(ANegExp node)
    {
        defaultIn(node);
    }

    public void outANegExp(ANegExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExp(ANegExp node)
    {
        inANegExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAModExp(node);
    }

    public void inAPotExp(APotExp node)
    {
        defaultIn(node);
    }

    public void outAPotExp(APotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPotExp(APotExp node)
    {
        inAPotExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPotExp(node);
    }

    public void inAIntExp(AIntExp node)
    {
        defaultIn(node);
    }

    public void outAIntExp(AIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExp(AIntExp node)
    {
        inAIntExp(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntExp(node);
    }

    public void inAFloatExp(AFloatExp node)
    {
        defaultIn(node);
    }

    public void outAFloatExp(AFloatExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExp(AFloatExp node)
    {
        inAFloatExp(node);
        if(node.getFloatProd() != null)
        {
            node.getFloatProd().apply(this);
        }
        outAFloatExp(node);
    }

    public void inAVarChamadaExp(AVarChamadaExp node)
    {
        defaultIn(node);
    }

    public void outAVarChamadaExp(AVarChamadaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarChamadaExp(AVarChamadaExp node)
    {
        inAVarChamadaExp(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAVarChamadaExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAOrExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inAIguigualExp(AIguigualExp node)
    {
        defaultIn(node);
    }

    public void outAIguigualExp(AIguigualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIguigualExp(AIguigualExp node)
    {
        inAIguigualExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAIguigualExp(node);
    }

    public void inAMenorExp(AMenorExp node)
    {
        defaultIn(node);
    }

    public void outAMenorExp(AMenorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExp(AMenorExp node)
    {
        inAMenorExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMenorExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inAMeniguExp(AMeniguExp node)
    {
        defaultIn(node);
    }

    public void outAMeniguExp(AMeniguExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeniguExp(AMeniguExp node)
    {
        inAMeniguExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMeniguExp(node);
    }

    public void inAMaiguExp(AMaiguExp node)
    {
        defaultIn(node);
    }

    public void outAMaiguExp(AMaiguExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiguExp(AMaiguExp node)
    {
        inAMaiguExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMaiguExp(node);
    }

    public void inADifExp(ADifExp node)
    {
        defaultIn(node);
    }

    public void outADifExp(ADifExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifExp(ADifExp node)
    {
        inADifExp(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADifExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExp(node);
    }

    public void inABoolSimplesExp(ABoolSimplesExp node)
    {
        defaultIn(node);
    }

    public void outABoolSimplesExp(ABoolSimplesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolSimplesExp(ABoolSimplesExp node)
    {
        inABoolSimplesExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outABoolSimplesExp(node);
    }

    public void inAIniArrayExp(AIniArrayExp node)
    {
        defaultIn(node);
    }

    public void outAIniArrayExp(AIniArrayExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIniArrayExp(AIniArrayExp node)
    {
        inAIniArrayExp(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAIniArrayExp(node);
    }

    public void inAVariavelExp(AVariavelExp node)
    {
        defaultIn(node);
    }

    public void outAVariavelExp(AVariavelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        inAVariavelExp(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelExp(node);
    }

    public void inAChamadaFuncaoCompChamada(AChamadaFuncaoCompChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoCompChamada(AChamadaFuncaoCompChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoCompChamada(AChamadaFuncaoCompChamada node)
    {
        inAChamadaFuncaoCompChamada(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAChamadaFuncaoCompChamada(node);
    }

    public void inAChamadaFuncaoChamada(AChamadaFuncaoChamada node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoChamada(AChamadaFuncaoChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoChamada(AChamadaFuncaoChamada node)
    {
        inAChamadaFuncaoChamada(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAChamadaFuncaoChamada(node);
    }

    public void inAVariasExpChamada(AVariasExpChamada node)
    {
        defaultIn(node);
    }

    public void outAVariasExpChamada(AVariasExpChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariasExpChamada(AVariasExpChamada node)
    {
        inAVariasExpChamada(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAVariasExpChamada(node);
    }

    public void inAUniExpChamada(AUniExpChamada node)
    {
        defaultIn(node);
    }

    public void outAUniExpChamada(AUniExpChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniExpChamada(AUniExpChamada node)
    {
        inAUniExpChamada(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUniExpChamada(node);
    }

    public void inAVariasDeclChamada(AVariasDeclChamada node)
    {
        defaultIn(node);
    }

    public void outAVariasDeclChamada(AVariasDeclChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariasDeclChamada(AVariasDeclChamada node)
    {
        inAVariasDeclChamada(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAVariasDeclChamada(node);
    }

    public void inAUniDeclChamada(AUniDeclChamada node)
    {
        defaultIn(node);
    }

    public void outAUniDeclChamada(AUniDeclChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUniDeclChamada(AUniDeclChamada node)
    {
        inAUniDeclChamada(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outAUniDeclChamada(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        outAChamada(node);
    }

    public void inACompostoTipo(ACompostoTipo node)
    {
        defaultIn(node);
    }

    public void outACompostoTipo(ACompostoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompostoTipo(ACompostoTipo node)
    {
        inACompostoTipo(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outACompostoTipo(node);
    }

    public void inAIntTipoTipo(AIntTipoTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipoTipo(AIntTipoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoTipo(AIntTipoTipo node)
    {
        inAIntTipoTipo(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTipoTipo(node);
    }

    public void inAFloatTipoTipo(AFloatTipoTipo node)
    {
        defaultIn(node);
    }

    public void outAFloatTipoTipo(AFloatTipoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTipoTipo(AFloatTipoTipo node)
    {
        inAFloatTipoTipo(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatTipoTipo(node);
    }

    public void inAStringTipoTipo(AStringTipoTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipoTipo(AStringTipoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipoTipo(AStringTipoTipo node)
    {
        inAStringTipoTipo(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTipoTipo(node);
    }

    public void inABoolTipoTipo(ABoolTipoTipo node)
    {
        defaultIn(node);
    }

    public void outABoolTipoTipo(ABoolTipoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoTipo(ABoolTipoTipo node)
    {
        inABoolTipoTipo(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolTipoTipo(node);
    }

    public void inAVoidTipo(AVoidTipo node)
    {
        defaultIn(node);
    }

    public void outAVoidTipo(AVoidTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTipo(AVoidTipo node)
    {
        inAVoidTipo(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTipo(node);
    }

    public void inAIndefinidaTipo(AIndefinidaTipo node)
    {
        defaultIn(node);
    }

    public void outAIndefinidaTipo(AIndefinidaTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndefinidaTipo(AIndefinidaTipo node)
    {
        inAIndefinidaTipo(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAIndefinidaTipo(node);
    }
}
